syntax = "proto3";
package proto;

option go_package = "./proto";

import "common.proto";
import "druid.proto";
import "hunter.proto";
import "mage.proto";
import "paladin.proto";
import "priest.proto";
import "rogue.proto";
import "shaman.proto";
import "warlock.proto";
import "warrior.proto";

message PlayerOptions {
    Race race = 1;
    Class class = 2;

    oneof spec {
        BalanceDruid balance_druid = 3;
        Hunter hunter = 4;
        Mage mage = 5;
        RetributionPaladin retribution_paladin = 6;
        ShadowPriest shadow_priest = 7;
        Rogue rogue = 8;
        ElementalShaman elemental_shaman = 9;
        Warlock warlock = 10;
        Warrior warrior = 11;
    }

    Consumes consumes = 12; // What consumes this player is going to be using.
}

message Player {
    PlayerOptions options = 1;
    EquipmentSpec equipment = 2;
    repeated double custom_stats = 3;
}

message Party {
    repeated Player players = 1;
}

message Raid {
    repeated Party parties = 1; 
}

message SimOptions {
    int32 iterations = 1;
    int64 random_seed = 2;
    bool debug = 3; // enables debug logging.
    bool exit_on_oom = 4;
    int32 action_delay_milliseconds = 5; // Adds delay between actions. Can simulate latency or downtime in a fight.
}

// RPC IndividualSim
message IndividualSimRequest {
    Player player = 1;

    RaidBuffs raid_buffs = 2;
    PartyBuffs party_buffs = 3;
    IndividualBuffs Individual_buffs = 4;

    Encounter encounter = 5;
	SimOptions sim_options = 6;
}

message IndividualSimResult {
    int64 execution_duration_ms = 1;
    string logs = 2;

    double dps_avg   = 3;
    double dps_stdev = 4;
    double dps_max   = 5;
    map<int32, int32> dps_hist = 6;

    int32 num_oom = 7;
    double oom_at_avg = 8;
    double dps_at_oom_avg = 9;

    repeated ActionMetric action_metrics = 10;

    string error = 11; 
}

// ID for actions that aren't spells or items.
enum OtherAction {
    OtherActionNone = 0;
    OtherActionWait = 1;
}

// The aggregated results from all uses of a particular action.
message ActionMetric {
    // Identifies this action.
    oneof action_id {
        int32 spell_id = 1;
        int32 item_id = 2;
        OtherAction other_id = 3;
    }

		// Distinguishes between different versions of the same action.
		// Currently the only use for this is Shaman Lightning Overload.
		int32 tag = 4;

		// # of times this action was used by the agent.
    int32 casts = 5;

		// # of times this action hit a target. For cleave spells this can be larger than casts.
    int32 hits = 6;

		// # of times this action was a critical strike.
    int32 crits = 7;

		// # of times this action was a Miss or Resist.
    int32 misses = 8;

		// Total damage done to all targets by this action.
    double damage = 9;
}

// RPC RaidSim
message RaidSimRequest {
    Raid raid = 1;
    Encounter encounter = 2;
    int64 random_seed = 3;
    double gcd_min = 4; // sets the minimum GCD
    bool debug = 5; // enables debug printing.
}

// RPC GearList
message GearListRequest {
    Spec spec = 1; // Each spec has a custom gear list
}
message GearListResult {
    repeated Item items = 1;
    repeated Enchant enchants = 2;
    repeated Gem gems = 3;
}

// RPC ComputeStats
message ComputeStatsRequest {
    Player player = 1;
    RaidBuffs raid_buffs = 2;
    PartyBuffs party_buffs = 3;
    IndividualBuffs individual_buffs = 4;
}
message ComputeStatsResult {
    repeated double gear_only = 1;
    repeated double finalStats = 2;
    repeated string sets = 3;
}

// RPC StatWeights
message StatWeightsRequest {
    IndividualSimRequest options = 1;
    repeated Stat stats_to_weigh = 2;
    Stat ep_reference_stat = 3;
}
message StatWeightsResult {
    repeated double weights = 1;
    repeated double weights_stdev = 2;
    repeated double ep_values = 3;
    repeated double ep_values_stdev = 4;
}
